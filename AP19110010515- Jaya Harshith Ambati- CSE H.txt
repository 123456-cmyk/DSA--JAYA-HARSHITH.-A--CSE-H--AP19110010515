Lab Programs 

Jaya Harshith Ambati
AP19110010515
CSE-H

 

1. C program to print preorder, inorder, and postorder traversal on Binary Tree.   

 

#include <stdio.h> 

#include <stdlib.h> 

struct node  

{ 

    int data; 

    struct node*left; 

    struct node*right; 

}; 

void inorder(struct node*root) 

{ 

    if(root==NULL) return; 

    inorder(root->left); 

    printf("%d->",root->data); 

    inorder(root->right); 

} 

void preorder(struct node*root) 

{ 

    if(root==NULL) return; 

    printf("%d->",root->data); 

    preorder(root->left); 

    preorder(root->right); 

} 

void postorder(struct node*root)  

{ 

    if(root==NULL) return; 

    postorder(root->left); 

    postorder(root->right); 

    printf("%d->",root->data); 

} 

struct node*createNode(int value) 

{ 

    struct node*newNode = malloc(sizeof(struct node)); 

    newNode->data=value; 

    newNode->left=NULL; 

    newNode->right=NULL; 

     return newNode; 

} 

struct node* insertLeft(struct node *root, int value)  

{ 

    root->left=createNode(value); 

    return root->left; 

}  

struct node*insertRight(struct node*root,int value) 

{ 

    root->right=createNode(value); 

    return root->right; 

} 

void main() 

{ 

    struct node*root=createNode(1); 

    insertLeft(root,12); 

    insertRight(root,9); 

    insertLeft(root->left,5); 

    insertRight(root->left,6); 

     

    printf("The Inorder traversal is \n"); 

    inorder(root); 

    printf("\n The Preorder traversal is "); 

    preorder(root); 

    printf("\n The Postorder traversal is \n"); 

    postorder(root); 

     

} 



2. C program to create (or insert) and inorder traversal on Binary Search Tree.  

#include<stdio.h>  

#include<stdlib.h>  

struct node  

{  

    int s;  

    struct node *left, *right;  

};  

struct node *newNode(int item)  

{  

    struct node *temp =  (struct node *)malloc(sizeof(struct node));  

    temp->s=item;  

    temp->left=temp->right = NULL;  

    return temp;  

}  

void inorder(struct node *root)  

{  

    if (root!=NULL)  

    {  

        inorder(root->left);  

        printf("%d\n",root->s);  

        inorder(root->right);  

    }  

}  

struct node* insert(struct node* node, int s)  

{  

    if (node == NULL)  

      return newNode(s);  

    if (s<node->s)  

        node->left=insert(node->left,s);  

    else if (s>node->s)  

        node->right=insert(node->right,s);     

    return node;  

}  

void main()  

{  

     

    struct node *root = NULL;  

    root = insert(root,30);  

    insert(root, 50);  

    insert(root, 40);  

    insert(root, 20);  

    insert(root, 90);  

    insert(root, 60);  

    insert(root, 80);  

    inorder(root);  

    

}


3. Write a C program depth first search (DFS) using array.

#include <stdio.h>
#include <stdlib.h>
int source,V,E,time,visited[200],G[200][200];
void DFS(int i)
{
    int j;
    visited[i]=1;
    printf(" %d->",i+1);
    for(j=0;j<V;j++)
    {
        if(G[i][j]==1&&visited[j]==0)
            DFS(j);
    }
}
int main()
{
    int i,j,v1,v2;
    printf("\t\t\tGraphs\n");
    printf("Enter the no of edges:");
    scanf("%d",&E);
    printf("Enter the no of vertices:");
    scanf("%d",&V);
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
            G[i][j]=0;
    }
    /*    creating edges :P    */
    for(i=0;i<E;i++)
    {
        printf("Enter the edges (format: V1 V2) : ");
        scanf("%d%d",&v1,&v2);
        G[v1-1][v2-1]=1;

    }

    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
            printf(" %d ",G[i][j]);
        printf("\n");
    }
    printf("Enter the source: ");
    scanf("%d",&source);
        DFS(source-1);
    return 0;
} 


4.Write a C program breath first search (BFS) using array.

#include<stdio.h>
int G[120][120],q[120],visited[120],n,front = 1, rear = 0 ;
void bfs(int v)
{
    int i;
    visited[v] = 1;
 for(i=1;i<=n;i++)
  if(G[v][i] && !visited[i])
   q[++rear]=i;
   if(front <= rear)
    bfs(q[front++]);
 }

int main()
{
 int v,i,j;

 printf("\n Enter the number of vertices:");
 scanf("%d",&n);
 for(i=1;i<=n;i++)
 {
  q[i]=0;
  visited[i]=0;
 }
 printf("\n Enter graph data in matrix form:\n");
 for(i=1;i<=n;i++)
  for(j=1;j<=n;j++)
   scanf("%d",&G[i][j]);
 printf("\n Enter the starting vertex:");
 scanf("%d",&v);
 bfs(v);
 printf("\n The nodes which are reachable are:\n");
 for(i=1;i<=n;i++)
  if(visited[i])
   printf("%d\t",i);
  else
   printf("\n %d is not reachable",i);

return 0;
}
 

 5. C program for linear search algorithm

    #include<stdio.h>
    void main()
 {
    int a[20],i,no,s;
    printf("Enter the number of array elements=");
    scanf("%d",&no);
    printf("Enter the array elements=");
    for(i=0;i<no;++i)
        scanf("%d",&a[i]);
    printf("Enter element to search in the array=");
    scanf("%d",&s);
    for(i=0;i<no;++i)
    {
        if(a[i]==s)
           break;
    }       
    if(i<no)
        printf("Element is found at index or location %d",i);
    else
        printf("Element was not found in the array");
  
 }


6. //C program for binary search algorithm
#include <stdio.h>
void main()
{
    int i,low,high,mid,no,s,a[100];
    printf("Enter number of elements in array=");
    scanf("%d",&no);
    printf("Give the elements in array=");
    for(i=0; i<no; i++)
    scanf("%d",&a[i]);
    printf("Enter value to find in the array=");
    scanf("%d",&s);
    low=0;
    high=(no-1);
    mid=(low+high)/2;
   while(low<=high)
   {
     if(a[mid]<s)
         low=(mid+1);
     else if(a[mid]==s)
     {
         printf(" Given element is found at index or location= %d",s);
         break;
     }
     else
        high=(mid - 1);
        mid=(low+high)/2;
 }
 if(low>high)
 printf("The given element is not found in list or array=%d",s);

}

 

 